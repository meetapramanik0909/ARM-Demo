<!--  You must have an AWS account to use the Amazon Connect CTI Adapter.
Downloading and/or using the Amazon Connect CTI Adapter is subject to the terms of the AWS Customer Agreement,
AWS Service Terms, and AWS Privacy Notice.

Â© 2017, Amazon Web Services, Inc. or its affiliates. All rights reserved.
Copyright (c) Aria Solutions 2018

NOTE:  Other license terms may apply to certain, identified software components
contained within or distributed with the Amazon Connect CTI Adapter if such terms are
included in the LibPhoneNumber-js and Salesforce Open CTI. For such identified components,
such other license terms will then apply in lieu of the terms above.

** libphonenumber-js; version 0.4.2 / 30.03.2017 -- https://github.com/catamphetamine/libphonenumber-js
Copyright (c) 2016 @catamphetamine

(The MIT License)

Copyright (c) 2016 @catamphetamine

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. -->
<apex:page id="ACSFCCP_Lightning_3" controller="amazonconnect.ACSFCCP_NamespaceController" extensions="amazonconnect.ACSFCCP_CallInformationController"
           showHeader="false" applyHtmlTag="false" applyBodyTag="false">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">

    <apex:slds />

    <apex:remoteObjects >
        <apex:remoteObjectModel name="amazonconnect__Call_Attributes_Configuration__mdt" fields="Id"
                                jsShorthand="Call_Attributes_Configuration">
            <apex:remoteObjectField name="amazonconnect__CCP_Attribute_Name__c" jsShorthand="Attribute_Name" />
            <apex:remoteObjectField name="amazonconnect__CCP_Attribute_Label__c" jsShorthand="Attribute_Label" />
            <apex:remoteObjectField name="amazonconnect__CCP_Attribute_Default_Value__c" jsShorthand="Attribute_Default_Value" />
            <apex:remoteObjectField name="amazonconnect__CCP_Attribute_FieldType__c" jsShorthand="Attribute_FieldType" />
            <apex:remoteObjectField name="amazonconnect__CCP_Attribute_Display_Order__c" jsShorthand="Attribute_Display_Order" />
            <apex:remoteObjectField name="amazonconnect__CCP_Attribute_Style__c" jsShorthand="Attribute_Style" />
            <apex:remoteObjectField name="amazonconnect__CCP_Attribute_Display_KeyValue__c" jsShorthand="Attribute_Display_KeyValue" />
            <apex:remoteObjectField name="amazonconnect__CCP_Attribute_Section__c" jsShorthand="Attribute_Section" />
        </apex:remoteObjectModel>

        <apex:remoteObjectModel name="amazonconnect__Presence_Sync_Configuration__mdt" fields="Id"
                                jsShorthand="Presence_Sync_Configuration">
            <apex:remoteObjectField name="amazonconnect__Call_Center__c" jsShorthand="Call_Center" />
            <apex:remoteObjectField name="amazonconnect__Rule__c" jsShorthand="Rule" />
        </apex:remoteObjectModel>

        <apex:remoteObjectModel name="amazonconnect__Call_Campaign__c" fields="Id" jsShorthand="Call_Campaign">
            <apex:remoteObjectField name="amazonconnect__Phone_Number__c" jsShorthand="Phone_Number" />
            <apex:remoteObjectField name="amazonconnect__Account__c" jsShorthand="Account" />
            <apex:remoteObjectField name="amazonconnect__Contact__c" jsShorthand="Contact" />
            <apex:remoteObjectField name="amazonconnect__Lead__c" jsShorthand="Lead" />
            <apex:remoteObjectField name="amazonconnect__Opportunity__c" jsShorthand="Opportunity" />
            <apex:remoteObjectField name="amazonconnect__Case__c" jsShorthand="Case" />
        </apex:remoteObjectModel>
    </apex:remoteObjects>

    <apex:includeScript value="/support/console/46.0/integration.js"/>
    <apex:includeScript value="/support/api/46.0/lightning/opencti_min.js" />
    <apex:includeScript value="/soap/ajax/47.0/connection.js" />

    <apex:includeScript value="{!$Resource.amazonconnect__amazonconnect13}" />
    <apex:includeScript value="{!$Resource.amazonconnect__libphonenumberjs_2}" />
    <apex:includeScript value="{!$Resource.amazonconnect__acsf_omnipresencesync}" />
    <apex:includeScript value="{!$Resource.amazonconnect__acsf_callattributesdisplay}" />
    <apex:includeScript value="{!$Resource.amazonconnect__acsf_callinformation}" />
    <apex:includeScript value="{!$Resource.amazonconnect__acsf_screenpopmanager}" />
    <apex:includeScript value="{!$Resource.amazonconnect__acsf_calltask}" />
    <apex:includeScript value="{!$Resource.amazonconnect__acsf_autocallcampaign}" />
    <apex:includeScript value="{!$Resource.amazonconnect__clipboard}" />
    <apex:includeScript value="{!$Resource.amazonconnect__AC_PhoneCall}" />

    <style>
        body {
            background-color: #F2F2F2;
            border: none;
        }

        #outercontainer {
            justify-content: center;
            text-align: center;
            vertical-align: middle;
            align-items: center;
            margin: 0 auto;
            border: none;
            padding: 0;
        }

        #connectcontainer {
            width: 1px;
            height: 1px;
            justify-content: center;
            align-items: center;
            border: none;
        }

        #callAttributesBadge {
            top: 42px;
            left: 10px;
            position: absolute;
            cursor: pointer;
        }

        #callAttributesBadge2 {
            top: 42px;
            left: 80px;
            position: absolute;
            cursor: pointer;
        }


        #callAttributesPopover {
            top: 75px;
            left: 5px;
            position: absolute;
            width: 95%;
            min-width: initial;
            max-height: 170px;
            display: flex;
            flex-direction: column;
        }

        #callAttributesPopover2 {
            top: 75px;
            left: 5px;
            position: absolute;
            width: 95%;
            min-width: initial;
            max-height: 170px;
        }

        .slds-scope .slds-table td,
        .slds-scope .slds-table th {
            padding: 0px;
        }

        .hidden {
            display: none;
        }

        .popover-content {
            overflow-y: auto;
            overflow-x: hidden;
            flex: 1;
        }
    </style>

    <body>
    <div id="outercontainer">
        <div class="slds-scope">
            <div id="ccpSoftphoneLogin" class="ccpSoftphone ccpLogin slds-align_absolute-center slds-hide" style="margin-top: 200px">
                <button id="loginButton" class="slds-button slds-button_brand">Sign in to CCP</button>
            </div>
            <div id="callAttributesBadge" class="slds-badge hidden">Attributes</div>
            <div id="callAttributesBadge2" class="slds-badge hidden">Links</div>
            <div id="callAttributesPopoverContainer" class="hidden">
                <section id="callAttributesPopover" class="slds-popover slds-nubbin_top-left slds-popover_small" role="dialog" aria-label="Dialog Title"
                         aria-describedby="dialog-body-id-1">
                    <div class="slds-popover__body popover-content" id="dialog-body-id-1">
                        <table class="slds-table slds-table_striped">
                            <thead>
                            <tr class="slds-text-title_caps">
                                <th scope="col">
                                    <div class="slds-truncate">{!$Label.ACSFCCP_CallAttributeKey}</div>
                                </th>
                                <th scope="col">
                                    <div class="slds-truncate">{!$Label.ACSFCCP_CallAttributeValue}</div>
                                </th>
                                <th>&nbsp;</th>
                            </tr>
                            </thead>
                            <tbody id="callAttributesList">
                            </tbody>
                        </table>
                    </div>
                </section>
            </div>
            <div id="callAttributesPopoverContainer2" class="hidden">
                <section id="callAttributesPopover2" class="slds-popover slds-nubbin_top slds-popover_small" role="dialog" aria-label="Dialog Title"
                         aria-describedby="dialog-body-id-2">
                    <div class="slds-popover__body" id="dialog-body-id-2">
                        <table class="slds-table slds-table_striped">
                            <tbody id="callAttributesList2">
                            </tbody>
                        </table>
                    </div>
                </section>
            </div>
        </div>
        <div id="connectcontainer"></div>
    </div>
    </body>

    <script type="application/javascript">
        (function (ctx) {

            var ccSettings = null;
            var connectCW = null;
            var connectCH = null;
            var connectLNCW = null;
            var connectLNCH = null;
            var connectURL = null;
            var connectPhoneFormat = null;
            var connectCustomRingtoneURL = null;
            var connectScreenpopAction = null;

            var loginWindow = null;

            //for SSO
            var connectSSOURL = null;
            var connectSSORelay = null;
            var connectMedialess = false;
            var connectLoginPopup = false;
            var connectAutoClose = false;
            var connectAutoLogin = 0;

            var connectEnableSoftphonePopout = true;

            var clipboardImage = "{!$Resource.ClipboardImage}";

            connect.getLog().info("clipboardImage: %s", clipboardImage);

            //Configure HVS properties
            var _workId; //see onWorkStart in processContactStart
            var _completedWorkWhen; //see onWorkStart in processContactStart
            var _taskId; //see updateTaskCallback
            var _disposition; //this needs to come from task.CallDisposition aka taskObject.Status see getUpdateTaskObject
            var _wasConnected; //set if the call was connected

            var loadACSFIntegration = function () {

                sforce.console && sforce.console.setCustomConsoleComponentPopoutable(connectEnableSoftphonePopout, function(result) {
                });


                try { ctx.ACSFIntegration.PhoneCall.onAgentHandler("{!namespaceClassPrefix}", "{!namespacePagePrefix}",ccSettings); }
                catch (err) { connect.getLog().info("ConnectSFCCP:loadACSFIntegration:PhoneCall.onAgentHandler failed: %s", err.message); }

                try { ctx.ACSFIntegration.ScreenpopManager.onAgentHandler("{!namespaceClassPrefix}", ccSettings); }
                catch (err) { connect.getLog().info("ConnectSFCCP:loadACSFIntegration:ScreenpopManager.onAgentHandler failed: %s", err.message); }

                try { ctx.ACSFIntegration.CallAttributesDisplay.onAgentHandler("{!namespaceClassPrefix}", clipboardImage); }
                catch (err) { connect.getLog().info("ConnectSFCCP:loadACSFIntegration:CallAttributesDisplay.onAgentHandler failed: %s", err.message); }

                try { ctx.ACSFIntegration.CallInformation.onAgentHandler("{!namespaceClassPrefix}"); }
                catch (err) { connect.getLog().info("ConnectSFCCP:loadACSFIntegration:CallInformation.onAgentHandler failed: %s", err.message); }

                try { ctx.ACSFIntegration.CallTask.onAgentHandler("{!namespaceClassPrefix}", "{!namespacePagePrefix}", "{!$Label.ACSFCCP_CallActivityTabName}", ccSettings); }
                catch (err) { connect.getLog().info("ConnectSFCCP:loadACSFIntegration:CallTask.onAgentHandler failed: %s", err.message); }

                try { ctx.ACSFIntegration.AutoCallCampaign.onAgentHandler(ccSettings); }
                catch (err) { connect.getLog().info("ConnectSFCCP:loadACSFIntegration:AutoCallCampaign.onAgentHandler failed: %s", err.message); }

                try { ctx.ACSFIntegration.OmniPresenceSync.onAgentHandler("{!namespaceClassPrefix}", ccSettings); }
                catch (err) { connect.getLog().info("ConnectSFCCP:loadACSFIntegration:OmniPresenceSync.onAgentHandler failed: %s", err.message); }


            }

            var showLoginScreen = function () {
                document.getElementById('connectcontainer').classList.add('hidden');
                document.getElementById('ccpSoftphoneLogin').classList.remove('slds-hide');
            }

            var showSoftphone = function () {
                document.getElementById('ccpSoftphoneLogin').classList.add('slds-hide');
                document.getElementById('connectcontainer').classList.remove('hidden');
            }

            var setupLoginHandler = function (ccpUrl) {
                connect.getLog().info("ConnectSFCCP:setupLoginHandler invoked");

                //begin change to support SSO
                /*
                document.getElementById('loginButton').addEventListener('click', function () {
                loginWindow = window.open(ccpUrl, 'AmazonConnectLoginWindow', 'width=400, height=520');
                });
                 */
                document.getElementById('loginButton').addEventListener('click', function () {
                    if (connectLoginPopup) {
                        loginWindow = window.open(ccpUrl, 'AmazonConnectLoginWindow', 'width=400, height=520');
                    }
                    else {
                        loginWindow = window.open(ccpUrl, '_blank');
                        loginWindow.focus();
                    }
                });
                //end change to support sso

                showLoginScreen();
            }

            var onSoftphoneLoginSuccessful = function () {
                connect.getLog().info("ConnectSFCCP:onSoftphoneLoginSuccessful invoked");
                connectAutoLogin = 0;
                showSoftphone();

                //if (loginWindow) {
                //changed for SSO
                if (loginWindow && connectAutoClose) {
                    loginWindow.close();
                    loginWindow = null;
                }

                // Listen for the logout (TERMINATED) event and reload the iframe to render the sign in button
                connect.core.getEventBus().subscribe(connect.EventType.TERMINATED, e => {
                    window.location.reload();
            });
            }

            var cbHeightSet = function (response) {
                if (response.success) {
                    connect.getLog().info("ConnectSFCCP:cbHeightSet:OK");
                } else {
                    connect.getLog().error("ConnectSFCCP:cbHeightSet:Error:%s", response.errors);
                }
            };

            var cbWidthSet = function (response) {
                if (response.success) {
                    connect.getLog().info("ConnectSFCCP:cbWidthSet:OK");
                } else {
                    connect.getLog().error("ConnectSFCCP:cbWidthSet:Error:%s", response.errors);
                }
            };

            var cbClickToDial = function (response) {
                if (response.success) {
                    connect.getLog().info("ConnectSFCCP:cbClickToDial:OK");
                } else {
                    connect.getLog().error("ConnectSFCCP:cbClickToDial:Error:%s", response.errors);
                }
            };

            var onClickListener = function (payload) {
                connect.agent(function (agent) {
                    try {
                        sessionStorage.setItem("CCP-callExactMatch", "true");
                        sessionStorage.setItem("CCP-callRecordId", payload.recordId);

                        connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:%s", JSON.stringify(payload));
                        connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:%s", payload.number);
                        var phoneContact = payload.number;
                        connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:Number:%s", phoneContact);
                        var phoneParsed = libphonenumber.parse(phoneContact, {country: {default: connectPhoneFormat.Country}});
                        connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:Parsed:%s", phoneParsed.country + "|" + phoneParsed.phone);
                        var e164PhoneNumber = libphonenumber.format(phoneParsed.phone, phoneParsed.country, connectPhoneFormat.NF);
                        connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:h164Number:%s", e164PhoneNumber);
                        var endpoint = connect.Address.byPhoneNumber(e164PhoneNumber);

                        if (agent && agent.getContacts() && agent.getContacts().length <= 1) {
                            if (agent.getContacts().length === 0) {
                                agent.connect(endpoint, {
                                    success: function(data) {
                                        connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:connect:Success:%s", JSON.stringify(data));
                                    },
                                    failure: function(data) {
                                        connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:connect:Failure:%s", JSON.stringify(data));
                                    }
                                });
                            } else {
                                agent.getContacts()[0].addConnection(endpoint, {
                                    success: function(data) {
                                        connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:addConnection:Success:%s", JSON.stringify(data));
                                    },
                                    failure: function(data) {
                                        connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:addConnection:Failure:%s", JSON.stringify(data));
                                    }
                                });
                            }

                            //sforce.opencti.setSoftphonePanelVisibility({visible: true});
                            connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:setVisible");
                            connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:GP:%s", agent.getPermissions());
                        }
                    } catch (e) {
                        connect.getLog().error("ConnectSFCCP:cbInConsole:Agent:Error:").withException(e);
                    }
                })
            };

            var cbInConsole = function (response) {
                if (response.success) {
                    connectEnableSoftphonePopout = ccSettings["/reqConnectSFCCPOptions/reqEnableSoftphonePopout"] === 'true';

                    connect.getLog().info("ConnectSFCCP:cbInConsole:" + ccSettings["/reqConnectSFCCPOptions/reqConnectURL"]);
                    connectURL = ccSettings["/reqConnectSFCCPOptions/reqConnectURL"];

                    //begin additions for SSO
                    connectSSOURL = ccSettings["/reqConnectSFCCPOptions/reqConnectSSOURL"];
                    connectSSORelay1 = ccSettings["/reqConnectSFCCPOptions/reqConnectSSORelay1"];
                    connectSSORelay2 = ccSettings["/reqConnectSFCCPOptions/reqConnectSSORelay2"];
                    connectSSORelay3 = ccSettings["/reqConnectSFCCPOptions/reqConnectSSORelay3"];

                    if(connectSSORelay1)
                        connectSSORelay = connectSSORelay1;

                    if(connectSSORelay && connectSSORelay2)
                        connectSSORelay = connectSSORelay + connectSSORelay2;

                    if(connectSSORelay && connectSSORelay3)
                        connectSSORelay = connectSSORelay + connectSSORelay3;

                    if (connectSSOURL) {
                        connectSSOURL = connectSSOURL + '?' + connectSSORelay;
                    }

                    connectMedialess = ccSettings["/reqConnectSFCCPOptions/reqConnectMedialess"] === 'true';
                    connectLoginPopup = ccSettings["/reqConnectSFCCPOptions/reqConnectLoginPopup"] === 'true' ;
                    connectAutoClose = ccSettings["/reqConnectSFCCPOptions/reqConnectAutoClose"] === 'true';
                    connectAutoLogin = ccSettings["/reqConnectSFCCPOptions/reqConnectAutoLogin"];
                    connectAutoLogin = parseInt(connectAutoLogin);
                    if (connectAutoLogin > 0) connectAutoLogin = connectAutoLogin * 1000;
                    //end additions for SSO

                    connectCW = ccSettings["/reqConnectSFCCPOptions/reqConnectLW"] + "px";
                    connectCH = ccSettings["/reqConnectSFCCPOptions/reqConnectLH"] + "px";
                    connectLNCW = ccSettings["/reqConnectSFCCPOptions/reqConnectLCW"];
                    connectLNCH = ccSettings["/reqConnectSFCCPOptions/reqConnectLCH"];
                    connectCustomRingtoneURL = ccSettings["/reqConnectSFCCPOptions/reqConnectCustomRingtoneURL"];

                    connectScreenpopAction = ccSettings["/reqConnectSFCCPOptions/reqScreenpopAction"] || 'connecting';

                    connectPhoneFormat = JSON.parse(ccSettings["/reqConnectSFCCPOptions/reqConnectPhoneFormat"]);

                    connect.getLog().info("ConnectSFCCP:cbInConsole:JSContainer:Prefix:%s", connectPhoneFormat.OPF + "|" + connectPhoneFormat.NPF + "|" + connectPhoneFormat.Country + "|" + connectPhoneFormat.NF + "|" + connectPhoneFormat.TNF);

                    var testnum = libphonenumber.format(connectPhoneFormat.TNF, connectPhoneFormat.Country, connectPhoneFormat.NF);
                    connect.getLog().info("ConnectSFCCP:cbInConsoleJSContainer:TestNumber:e164Number:%s", testnum);
                    var testnum2 = testnum.replace(/([^0-9])+/g, '');
                    connect.getLog().info("ConnectSFCCP:cbInConsole:JSContainer:TestNumber:e164Numberstripped:%s", testnum2);

                    connect.getLog().info("ConnectSFCCP:cbInConsole:JSContainer");
                    var container = document.getElementById("connectcontainer");
                    container.style.width = connectCW;
                    container.style.height = connectCH;

                    var ccpConfig = {
                        ccpUrl: connectURL,
                        loginPopup: false,
                        softphone: {
                            allowFramedSoftphone: !connectMedialess
                        }
                    };

                    if (connectCustomRingtoneURL && connectCustomRingtoneURL.startsWith("https://")) {
                        ccpConfig.softphone.ringtoneUrl = connectCustomRingtoneURL;
                    }
                    

                    connect.core.initCCP(container, ccpConfig);

                    //changed for SSO
                    if (connectSSOURL) {
                        setupLoginHandler(connectSSOURL);
                    }
                    else {
                        setupLoginHandler(connectURL);
                    }

                    connect.contact(function (contact) {
                        try {
                            contact.onIncoming(function () {
                                sessionStorage.setItem("CCP-callActive", "true");
                                sessionStorage.setItem("CCP-callbackInProgress", "true");
                                ctx.ACSFIntegration.CallInformation.dumpContact("Lightning_3 onIncoming", contact);
                                ctx.ACSFIntegration.CallAttributesDisplay.onIncoming(contact);
                                ctx.ACSFIntegration.ScreenpopManager.onIncoming(contact, connectPhoneFormat);
                            });
                        } catch (e) {
                            connect.getLog().error("ConnectSFCCP:onIncoming:Error:").withException(e);
                        }

                        try {
                            contact.onConnecting(function () {
                                sessionStorage.setItem("CCP-callActive", "true");
                                _wasConnected = true; //for HVS
                                if (contact.isInbound()) {
                                    ctx.ACSFIntegration.CallInformation.dumpContact("Lightning_3 onConnecting inbound", contact);
                                    ctx.ACSFIntegration.CallAttributesDisplay.onConnecting(contact);

                                    if (connectScreenpopAction === 'connecting') {
                                        ctx.ACSFIntegration.ScreenpopManager.onConnecting(contact, connectPhoneFormat, 'inbound');
                                    }
                                }
                                else {
                                    ctx.ACSFIntegration.CallInformation.dumpContact("Lightning_3 onConnecting outbound", contact);

                                    if (connectScreenpopAction === 'connecting') {
                                        ctx.ACSFIntegration.ScreenpopManager.onConnecting(contact, connectPhoneFormat, 'outbound');
                                    }
                                }
                            });
                        } catch (e) {
                            connect.getLog().error("ConnectSFCCP:onConnecting:Error:").withException(e);
                        }

                        try {
                            contact.onConnected(function () {
                                sessionStorage.setItem("CCP-callActive", "true");
                                ctx.ACSFIntegration.CallInformation.dumpContact("Lightning_3 onConnected", contact);

                                if (connectScreenpopAction === 'connected') {
                                    ctx.ACSFIntegration.ScreenpopManager.onConnected(contact, connectPhoneFormat, 'outbound');
                                }
                                ctx.ACSFIntegration.PhoneCall.onConnected(contact);
                                ctx.ACSFIntegration.CallTask.onConnected(contact);

                            });
                        } catch (e) {
                            connect.getLog().error("ConnectSFCCP:onConnected:Error:").withException(e);
                        }

                        try {
                            contact.onAccepted(function () {
                                sessionStorage.setItem("CCP-callActive", "true");
                                ctx.ACSFIntegration.CallInformation.dumpContact("Lightning_3 onAccepted", contact);

                                //ctx.ACSFIntegration.CallAttributesDisplay.onAccepted(contact);
                            });
                        } catch (e) {
                            connect.getLog().error("ConnectSFCCP:onAccepted:Error:").withException(e);
                        }

                        try {
                            contact.onEnded(function () {
                                // Test for valid contact.  The method contact.onEnded fires when setting to available
                                var contactType = contact.getType();

                                ctx.ACSFIntegration.CallInformation.dumpContact("Lightning_3 onEnded", contact);

                                var callbackInProgress = sessionStorage.getItem('CCP-callbackInProgress') === 'true';

                                if (!callbackInProgress && contact.getType() === 'queue_callback' && !contact.isConnected()) {
                                    sessionStorage.setItem("CCP-callbackInProgress", "false");
                                    sessionStorage.setItem("CCP-callActive", "false");
                                }
                                ctx.ACSFIntegration.PhoneCall.onEnded(contact);
                                ctx.ACSFIntegration.CallTask.onEnded(contact);
                                ctx.ACSFIntegration.CallAttributesDisplay.onEnded(contact);

                                if (sforce.opencti) {
                                    //hvs for call task
                                    if (_completedWorkWhen === "TaskSaved") {
                                        connect.getLog().info("ConnectSFCCP:HVS:Complte Work :TaskSaved");
                                        _taskId = sessionStorage.getItem("CCP-callTaskId");

                                    }
                                    //hvs for all end
                                    if (_completedWorkWhen === "CallEnd") {
                                        console.log("ConnectSFCCP:HVS:CallEnd");
                                        if (sforce.opencti) {
                                            sforce.opencti.hvs.completeWork({
                                                workId: _workId, // Id sent via onWorkStart
                                                attributes: {
                                                    wasConnected: _wasConnected // Whether the call successfully connected
                                                },
                                                callback: function() {
                                                    connect.getLog().info("ConnectSFCCP:HVS:CallEnd:callback");
                                                    _completedWorkWhen = "";
                                                }
                                            });
                                        }
                                        _wasConnected = false;
                                    }
                                }

                                //Remove Session variables which are used globally
                                sessionStorage.removeItem("CCP-callTaskId");
                                sessionStorage.removeItem("CCP-phoneCallRecordId");
                                sessionStorage.removeItem("CCP-callActive");
                                sessionStorage.removeItem("CCP-callExactMatch");
                                sessionStorage.removeItem("CCP-whoId");
                                sessionStorage.removeItem("CCP-whatId");
                                sessionStorage.removeItem("CCP-callbackInProgress");

                            });
                        } catch (e) {
                            connect.getLog().error("ConnectSFCCP:onEnd:Error:").withException(e);
                        }
                    });

                    connect.agent(function (agent) {
                        window.ccp = window.ccp || {};
                        window.ccp.agent = agent;

                        try {
                            connect.getLog().info("ConnectSFCCP:GP:%s", agent.getPermissions());

                            var aPermissions = agent.getPermissions();
                            connect.getLog().info("ConnectSFCCP:GP: %s", aPermissions);
                            if (aPermissions.includes("outboundCall")) {
                                sforce.opencti.enableClickToDial({ callback: cbClickToDial });
                            }

                            onSoftphoneLoginSuccessful();
                        }
                        catch (e) {
                            connect.getLog().error("ConnectSFCCP:GP::Error:").withException(e);

                        }

                        agent.onStateChange(function () {
                            if (agent.getState().type === connect.AgentStateType.ROUTABLE) {
                                connect.getLog().info("ConnectSFCCP:HVS: Agent is in Available state");
                                connect.getLog().info("ConnectSFCCP:HVS: Tasks ID %s", _taskId + " Work Id :" + _workId + " Work Completed:" + _completedWorkWhen);
                                if(sforce.opencti && _taskId  && _workId && _completedWorkWhen === "TaskSaved" ){
                                    taskDispositionCodeFieldApiName = ccSettings["/reqConnectSFCCPOptions/reqTaskDispositionCodeFieldApiName"];

                                    //get disposition code from task and update HVS flow
                                    sforce.connection.sessionId = '{!GETSESSIONID()}';

                                    if(taskDispositionCodeFieldApiName){
                                        var soqlQuery = "SELECT Id," + taskDispositionCodeFieldApiName + " FROM Task  where Id='" + _taskId +"' LIMIT 1"

                                        var result = sforce.connection.query(soqlQuery, {
                                            onSuccess : function(result) {
                                                var records = result.getArray("records");
                                                connect.getLog().info("ConnectSFCCP:HVS Get disposition code:%s", JSON.stringify(records));
                                                for (var i=0; i<records.length; i++) {
                                                    var record = records[i];
                                                    _disposition = record.Call_Result__c;
                                                }
                                                connect.getLog().info("ConnectSFCCP:HVS: Disposition code %s", _disposition + " for Task Id :" + _taskId);
                                                //Set disposition code to HVS flow
                                                sforce.opencti.hvs.completeWork({
                                                    workId: _workId, // Id sent via onWorkStart
                                                    attributes: {
                                                        disposition: _disposition, // set in getUpdateTaskObject
                                                        taskId: _taskId // Id of task created
                                                    },
                                                    callback: function() {
                                                        connect.getLog().info("ConnectSFCCP:HVS:TaskSaved:callback");
                                                        _completedWorkWhen = "";
                                                        _taskId="";
                                                        _disposition="";
                                                    }
                                                });
                                            },
                                            onFailure : function(error) {
                                                connect.getLog().info("ConnectSFCCP:HVS Task Complete Error:%s", JSON.stringify(error));
                                            }
                                        });
                                    }
                                    else{
                                        sforce.opencti.hvs.completeWork({
                                            workId: _workId, // Id sent via onWorkStart
                                            attributes: {
                                                disposition: '', // set in getUpdateTaskObject
                                                taskId: _taskId // Id of task created
                                            },
                                            callback: function() {
                                                connect.getLog().info("ConnectSFCCP:HVS:TaskSaved:callback");
                                                _completedWorkWhen = "";
                                                _taskId="";
                                                _disposition="";
                                            }
                                        });
                                    }
                                }
                            }
                        });
                    });

                    connect.getLog().info("ConnectSFCCP:cbInConsole:CTD");

                    connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:settingOnClickListener");
                    sforce.opencti.onClickToDial({ listener: onClickListener });

                    console.log("ConnectSFCCP:HVS:processContactStart:onWorkStart");
                    try {
                        sforce.opencti.hvs.onWorkStart({
                            listener: function(payload) {
                                _workId = payload.workId; // Save the work ID
                                _completedWorkWhen = payload.completeWorkWhen; // Save the completion requirement
                                var toVal = payload.attributes.to; // Save the number to associate with onClickToDial
                                connect.getLog().info("ConnectSFCCP:HVS:onWorkStart: _workId=" + _workId + " _completedWorkWhen=" + _completedWorkWhen + " toVal=" + toVal);
                            }
                        });
                    } catch (e) {
                        connect.getLog().error("ACSFIntegration:CallTask:onIncoming:Error:").withException(e);
                    }


                    connect.getLog().info("ConnectSFCCP:cbInConsole:SFHW H:%s", connectLNCH + " W:" + connectLNCW + " CH:" + connectCH + " CW:" + connectCW);
                    sforce.opencti.setSoftphonePanelHeight({ heightPX: parseInt(connectLNCH), callback: cbHeightSet });
                    sforce.opencti.setSoftphonePanelWidth({ widthPX: parseInt(connectLNCW), callback: cbWidthSet });

                    //auto-login
                    connect.getLog().info("ConnectSFCCP:cbInConsole:connectAutoLogin=%s", connectAutoLogin);
                    if(connectAutoLogin >= 1000)
                    {
                        setTimeout( function () {
                            if(connectAutoLogin >= 1000) document.getElementById('loginButton').click();
                        }, connectAutoLogin )

                    }

                    loadACSFIntegration();
                }
                else {
                    connect.getLog().info("ConnectSFCCP:cbInConsole:Error");
                }
            };

            var cbCCSettings = function (response) {
                if (response.success) {
                    connect.getLog().info("ConnectSFCCP:cbCCSettings:OK:%s", response.success);
                    ccSettings = response.returnValue;
                    cbInConsole(response);
                }
                else {
                    connect.getLog().error("ConnectSFCCP:cbCCSettings:Error:%s", response.errors);
                }
            };

            try {
                connect.getLog().info("ConnectSFCCP:Initialization:getCCSettings");
                sforce.opencti.getCallCenterSettings({ callback: cbCCSettings });
            } catch (e) {
                connect.getLog().error("ConnectSFCCP:Initialization:getCCSettings :Error:").withException(e);
            }
        })(this);
    </script>

    </html>
</apex:page>